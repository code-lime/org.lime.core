name: Publish to GitHub Packages

on:
  push:
    tags: [ "*" ]
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write
  packages: write

env:
  GITHUB_OWNER: ${{ github.repository_owner }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_REPOSITORY: ${{ github.repository }}
  GITHUB_PACKAGE_USERNAME: ${{ github.repository_owner }}
  GITHUB_PACKAGE_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'oracle'

      - name: Make Gradle Wrapper Executable
        run: chmod +x gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: wrapper

      - name: Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build
        env:
          ITEMS: |
            common=global
            paper=global
            velocity=global
            fabric=1.20.1
            fabric=1.21.4
          CONTINUE_ON_ERROR: "false"
        run: |
          set -euo pipefail
          chmod +x ./gradlew

          ITEMS_CONTENT="${ITEMS:-}"
          CONT="${CONTINUE_ON_ERROR:-false}"

          trim() {
            local var="$*"
            var="${var#"${var%%[![:space:]]*}"}"
            var="${var%"${var##*[![:space:]]}"}"
            printf '%s' "$var"
          }

          mkdir -p ./libs

          # parse comma or newline separated entries
          mapfile -t lines < <(printf '%s\n' "$ITEMS_CONTENT" | tr ',' '\n')

          idx=0
          failures=0

          for raw in "${lines[@]}"; do
            entry="$(trim "$raw")"
            [ -z "$entry" ] && continue
            [[ "$entry" == \#* ]] && continue

            name="${entry%%=*}"
            type="${entry#*=}"

            name="$(trim "$name")"
            type="$(trim "$type")"

            if [ -z "$name" ] || [ -z "$type" ] || [[ "$entry" == "$name" ]]; then
              echo "Bad entry (expected NAME=TYPE): '$entry'" >&2
              failures=$((failures+1))
              if [ "$CONT" != "true" ]; then
                exit 1
              else
                continue
              fi
            fi

            idx=$((idx+1))
            echo "::group::Gradle build [$idx] $name = $type"
            if ! ./gradlew ":${name}:build" -Pvariable="${type}" -DincludeModules="${name}" --build-cache --parallel; then
              rc=$?
              echo "❌ Build failed for $name (rc=$rc)" >&2
              failures=$((failures+1))
              echo "::endgroup::"
              if [ "$CONT" != "true" ]; then
                exit $rc
              else
                continue
              fi
            fi
            echo "::endgroup::"

            # collect jars (prefix with module name)
            echo "Collecting jars for $name..."
            shopt -s nullglob
            jars=( "./${name}/build/libs/"*.jar )
            if [ ${#jars[@]} -eq 0 ]; then
              echo "⚠️ No jars found in ./${name}/build/libs for $name"
              failures=$((failures+1))
              if [ "$CONT" != "true" ]; then
                exit 1
              else
                shopt -u nullglob
                continue
              fi
            fi

            for jar in "${jars[@]}"; do
              dest="./libs/${name}-$(basename "$jar")"
              if ! cp "$jar" "$dest"; then
                echo "❌ Failed to copy $jar -> $dest" >&2
                failures=$((failures+1))
                if [ "$CONT" != "true" ]; then
                  shopt -u nullglob
                  exit 1
                fi
              else
                echo " -> copied $(basename "$jar") -> $dest"
              fi
            done
            shopt -u nullglob
          done

          if [ "$failures" -ne 0 ]; then
            echo "$failures entry(ies) had errors"
            exit 1
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: all-artifacts
          path: |
            libs/*.jar

  publish:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - module: common
            variable: global
          - module: paper
            variable: global
          - module: velocity
            variable: global
          - module: fabric
            variable: 1.20.1
          - module: fabric
            variable: 1.21.4
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'oracle'

      - name: Make Gradle Wrapper Executable
        run: chmod +x gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: wrapper

      - name: Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Publish ${{ matrix.module }}
        run: |
          ./gradlew :${{ matrix.module }}:publish -Pvariable=${{ matrix.variable }} -DincludeModules=${{ matrix.module }} --build-cache --parallel

  release:
    needs: [build, publish]
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-artifacts'
          path: artifacts

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*.jar