package org.lime.core.common.utils.tuple;

import org.lime.core.common.utils.execute.*;

// Generated by JavaScript (c) Lime
public class Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> extends BaseTuple {
    public LockTuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> lock() { return new LockTuple15<>(this); }
    @Override public Object[] getValues() { return new Object[] { val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11, val12, val13, val14 }; }
    public Tuple15(T0 val0, T1 val1, T2 val2, T3 val3, T4 val4, T5 val5, T6 val6, T7 val7, T8 val8, T9 val9, T10 val10, T11 val11, T12 val12, T13 val13, T14 val14) { this.val0 = val0; this.val1 = val1; this.val2 = val2; this.val3 = val3; this.val4 = val4; this.val5 = val5; this.val6 = val6; this.val7 = val7; this.val8 = val8; this.val9 = val9; this.val10 = val10; this.val11 = val11; this.val12 = val12; this.val13 = val13; this.val14 = val14; }
    public T0 val0; public T1 val1; public T2 val2; public T3 val3; public T4 val4; public T5 val5; public T6 val6; public T7 val7; public T8 val8; public T9 val9; public T10 val10; public T11 val11; public T12 val12; public T13 val13; public T14 val14;
    public T0 get0() { return val0; } public T1 get1() { return val1; } public T2 get2() { return val2; } public T3 get3() { return val3; } public T4 get4() { return val4; } public T5 get5() { return val5; } public T6 get6() { return val6; } public T7 get7() { return val7; } public T8 get8() { return val8; } public T9 get9() { return val9; } public T10 get10() { return val10; } public T11 get11() { return val11; } public T12 get12() { return val12; } public T13 get13() { return val13; } public T14 get14() { return val14; }
    @Override public int size() { return 15; }
    @Override public int hashCode() { return super.hashCode(); }
    @Override public boolean equals(Object obj) { return super.equals(obj); }
    @Override public Object get(int index) { switch (index) { case 0: return val0; case 1: return val1; case 2: return val2; case 3: return val3; case 4: return val4; case 5: return val5; case 6: return val6; case 7: return val7; case 8: return val8; case 9: return val9; case 10: return val10; case 11: return val11; case 12: return val12; case 13: return val13; case 14: return val14; } return null; }
    @Override public void set(int index, Object value) { switch (index) { case 0: val0 = (T0)value; break; case 1: val1 = (T1)value; break; case 2: val2 = (T2)value; break; case 3: val3 = (T3)value; break; case 4: val4 = (T4)value; break; case 5: val5 = (T5)value; break; case 6: val6 = (T6)value; break; case 7: val7 = (T7)value; break; case 8: val8 = (T8)value; break; case 9: val9 = (T9)value; break; case 10: val10 = (T10)value; break; case 11: val11 = (T11)value; break; case 12: val12 = (T12)value; break; case 13: val13 = (T13)value; break; case 14: val14 = (T14)value; break; } }
    @Override public Object edit(int index, Func1<Object, Object> func) { Object ret; set(index, ret = func.invoke(get(index))); return ret; }
    public void set(Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> other) { this.val0 = other.val0; this.val1 = other.val1; this.val2 = other.val2; this.val3 = other.val3; this.val4 = other.val4; this.val5 = other.val5; this.val6 = other.val6; this.val7 = other.val7; this.val8 = other.val8; this.val9 = other.val9; this.val10 = other.val10; this.val11 = other.val11; this.val12 = other.val12; this.val13 = other.val13; this.val14 = other.val14; }
    public <A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14>Tuple15<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14> map(Func1<T0, A0> map0, Func1<T1, A1> map1, Func1<T2, A2> map2, Func1<T3, A3> map3, Func1<T4, A4> map4, Func1<T5, A5> map5, Func1<T6, A6> map6, Func1<T7, A7> map7, Func1<T8, A8> map8, Func1<T9, A9> map9, Func1<T10, A10> map10, Func1<T11, A11> map11, Func1<T12, A12> map12, Func1<T13, A13> map13, Func1<T14, A14> map14) { return Tuple.of(map0.invoke(val0), map1.invoke(val1), map2.invoke(val2), map3.invoke(val3), map4.invoke(val4), map5.invoke(val5), map6.invoke(val6), map7.invoke(val7), map8.invoke(val8), map9.invoke(val9), map10.invoke(val10), map11.invoke(val11), map12.invoke(val12), map13.invoke(val13), map14.invoke(val14)); }
    public void invoke(Action15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action) { action.invoke(val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11, val12, val13, val14); }
    public <T>T invokeGet(Func15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T> func) { return func.invoke(val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11, val12, val13, val14); }
}