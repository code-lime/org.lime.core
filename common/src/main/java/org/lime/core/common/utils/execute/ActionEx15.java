package org.lime.core.common.utils.execute;

// Generated by JavaScript (c) Lime
public interface ActionEx15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> extends Callable {
    void invoke(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) throws Throwable;
    default Action15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> throwable() {
        return (val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11, val12, val13, val14) -> { try { this.invoke(val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11, val12, val13, val14); } catch (Throwable e) { throw new IllegalArgumentException(e); } };
    }
    default Func15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Boolean> optional() {
        return (val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11, val12, val13, val14) -> { try { this.invoke(val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11, val12, val13, val14); return true; } catch (Throwable e) { return false; } };
    }
    @Override default Object call(Object[] args) { return throwable().call(args); }
}