var logs = [];
function create(size, func, separator) {
    var list = [];
    for (var i = 0; i < size; i++) list.push(func(i));
    return list.join(separator)
}
function createCommandException(index) {
    if (index === 0) return {
        'files': {},
        'functions': []
    };
    var files = {};
    var type = create(index, function(i) { return "T" + i; }, ", ");
    var targs = create(index, function(i) { return "T"+i+" val"+i; }, ", ");
    var args = create(index, function(i) { return "val" + i; }, ", ");

    var functions = [
        "    public static <"+type+">Generic"+index+"CommandExceptionType<"+type+"> of(Func"+index+"<"+type+", Message> function){ return new Generic"+index+"CommandExceptionType<>(function); }",
    ];

    files["Generic"+index+"CommandExceptionType.java"] = [
        "package "+PACKAGE+";",
        "",
        "import com.mojang.brigadier.ImmutableStringReader;",
        "import com.mojang.brigadier.Message;",
        "import com.mojang.brigadier.exceptions.CommandExceptionType;",
        "import com.mojang.brigadier.exceptions.CommandSyntaxException;",
        "import org.lime.core.common.system.execute.Func"+index+";",
        "",
        "// Generated by JavaScript (c) Lime",
        "public record Generic"+index+"CommandExceptionType<"+type+">(",
        "        Func"+index+"<"+type+", Message> function)",
        "        implements CommandExceptionType {",
        "    public CommandSyntaxException create("+targs+") {",
        "        return new CommandSyntaxException(this, function.invoke("+args+"));",
        "    }",
        "    public CommandSyntaxException createWithContext("+targs+", ImmutableStringReader reader) {",
        "        return new CommandSyntaxException(this, function.invoke("+args+"), reader.getString(), reader.getCursor());",
        "    }",
        "}",
    ].join('\n');

    return {
        'files': files,
        'functions': functions
    }
}
function combineItem(a, b) {
    var out = {
        'files': {},
        'functions': []
    };
    var ab = [a,b];
    for (var i in ab) {
        var item = ab[i];
        for (var key in item.files) out.files[key] = item.files[key];
        out.functions = out.functions.concat(item.functions);
    }
    return out;
}

function createObj() {
    var out = {
        'files': {},
        'functions': []
    };
    for (var i = 1; i < 10; i++)
        out = combineItem(out, createCommandException(i));
    return out;
}
function getAllFunctions() {
    try {
        return createObj().functions.join("\n");
    } catch (e) {
        return 'ERROR ' + e.name + ": " + e.message + "\nLogs:\n"+logs.join('\n');
    }
}
function getAllFiles() {
    try {
        var files = createObj().files;
        var out = [];
        for (var fileName in files) {
            var fileText = files[fileName];
            out.push(fileName);
            out.push(fileText);
        }
        return out.join('\r');
    } catch (e) {
        return 'ERROR ' + e.name + ": " + e.message + "\nLogs:\n"+logs.join('\n');
    }
}