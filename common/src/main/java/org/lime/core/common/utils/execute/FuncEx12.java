package org.lime.core.common.utils.execute;

import java.util.Optional;

// Generated by JavaScript (c) Lime
public interface FuncEx12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> extends Callable {
    TResult invoke(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) throws Throwable;
    default Func12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> throwable() {
        return (val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11) -> { try { return this.invoke(val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11); } catch (Throwable e) { throw new IllegalArgumentException(e); } };
    }
    default Func12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Optional<TResult>> optional() {
        return (val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11) -> { try { return Optional.ofNullable(this.invoke(val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11)); } catch (Throwable e) { return Optional.empty(); } };
    }
    @Override default Object call(Object[] args) { return throwable().call(args); }
}