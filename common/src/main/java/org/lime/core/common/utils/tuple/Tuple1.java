package org.lime.core.common.utils.tuple;

import org.lime.core.common.utils.execute.*;

// Generated by JavaScript (c) Lime
public class Tuple1<T0> extends BaseTuple {
    public LockTuple1<T0> lock() { return new LockTuple1<>(this); }
    @Override public Object[] getValues() { return new Object[] { val0 }; }
    public Tuple1(T0 val0) { this.val0 = val0; }
    public T0 val0;
    public T0 get0() { return val0; }
    @Override public int size() { return 1; }
    @Override public int hashCode() { return super.hashCode(); }
    @Override public boolean equals(Object obj) { return super.equals(obj); }
    @Override public Object get(int index) { switch (index) { case 0: return val0; } return null; }
    @Override public void set(int index, Object value) { switch (index) { case 0: val0 = (T0)value; break; } }
    @Override public Object edit(int index, Func1<Object, Object> func) { Object ret; set(index, ret = func.invoke(get(index))); return ret; }
    public void set(Tuple1<T0> other) { this.val0 = other.val0; }
    public <A0>Tuple1<A0> map(Func1<T0, A0> map0) { return Tuple.of(map0.invoke(val0)); }
    public void invoke(Action1<T0> action) { action.invoke(val0); }
    public <T>T invokeGet(Func1<T0, T> func) { return func.invoke(val0); }
}