import javax.script.ScriptEngineManager;
import java.nio.file.Paths

class SourceGenerator {
    public static final SourceGenerator Instance = new SourceGenerator();
    private final ScriptEngineManager engine = new ScriptEngineManager();

    private String executeJs(String js) {
        return engine.getEngineByName("nashorn").eval(js);
    }
    private static String getFileExtension(File file) {
        String name = file.getName();
        int lastIndexOf = name.lastIndexOf(".");
        return lastIndexOf == -1 ? "" : name.substring(lastIndexOf);
    }
    private String generateFile(File dir, String text) {
        List<String> lines = text.replace("\r", "").split("\n");
        List<String> output = new ArrayList<>();
        List<String> code = null;
        boolean  edited = false;
        int size = lines.size();
        for (int i = 0; i < size; i++) {
            String line = lines.get(i);
            String trim_line = line.trim();
            int start = trim_line.indexOf("//");
            if (start != 0) {
                if (code != null) continue;
                output.add(line);
                continue;
            }
            switch (trim_line) {
                case "//<generator>":
                    if (code != null) throw new IllegalArgumentException("<generator> in line '"+(i+1)+"'");
                    code = new ArrayList<>();
                    output.add(line);
                    break;
                case "//</generator>":
                    if (code == null) throw new IllegalArgumentException("</generator> in line '"+(i+1)+"'");
                    var executeCode = executeJs(String.join("\n", code));
                    output.add(executeCode);
                    output.add(line);

                    edited = true;
                    code = null;
                    break;
                default:
                    if (trim_line.startsWith("//<generator name=\"")) {
                        if (code != null) throw new IllegalArgumentException("<generator> in line '"+(i+1)+"'");

                        String file_name = trim_line.substring(19);
                        file_name = file_name.substring(0, file_name.indexOf("\">"));
                        String[] args = file_name.split(':');
                        code = new ArrayList<>();
                        if (args.length > 1) {
                            System.out.println('Execute file function: ' + args[0] + " : " + args[1]);
                            code.add(Paths.get(dir.absolutePath, args[0]).toFile().text + "\n" + args[1]);
                        } else {
                            System.out.println('Execute single file: ' + file_name);
                            code.add(Paths.get(dir.absolutePath, file_name).toFile().text);
                        }
                        output.add(line);
                    } else {
                        output.add(line);
                        if (code != null) code.add(trim_line.substring(2));
                    }
                    break;
            }
        }
        return edited ? String.join("\n", output) : null;
    }
    private HashMap<String, String> generateJavas(File dir, String text) {
        List<String> lines = text.replace("\r", "").split("\n");
        HashMap<String, String> outputFiles = new HashMap<>();
        for (String line in lines) {
            String[] data = line.split(":", 2);

            System.out.println('Execute folder function: ' + data[0] + " : " + data[1]);

            String js = Paths.get(dir.absolutePath, data[0]).toFile().text + "\n" + data[1];
            String _raw = executeJs(js);

            String[] raw = _raw.split('\r');
            int filesLength = raw.length / 2;
            for (int i = 0; i < filesLength; i++) {
                int index = i * 2;
                String fileName = raw[index];
                String fileText = raw[index + 1];
                outputFiles.put(fileName, fileText);
            }
        }
        return outputFiles;
    }

    void executeGenerator(Iterable<File> files) {
        for (File file : files) {
            String filePath = file.getAbsolutePath();
            switch (getFileExtension(file)) {
                case ".javas": {
                    HashMap<String, String> _files = generateJavas(file.parentFile, file.text);
                    for (Map.Entry<String, String> _kv : _files.entrySet()) {
                        String _text = _kv.getValue();
                        var _filePath = Paths.get(file.parentFile.absolutePath, _kv.getKey()).toAbsolutePath();
                        var _file = _filePath.toFile();
                        if (_file.text.equals(_text)) {
                            //System.out.println("EQUALS EDITED: " + filePath);
                        } else {
                            System.out.println("EDITED: " + _filePath);
                            _file.text = _text;
                        }
                    }
                    break;
                }
                case ".java": {
                    String text = file.text;
                    String _file = generateFile(file.parentFile, text);
                    if (_file != null) {
                        if (_file.equals(text)) {
                            //System.out.println("EQUALS EDITED: " + filePath);
                        } else {
                            System.out.println("EDITED: " + filePath);
                            file.text = text = _file;
                        }
                    }
                    break;
                }
            }
        }
    }
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.openjdk.nashorn:nashorn-core:15.4"
    }
}

task generator {
    sourceSets.forEach {
        SourceGenerator.Instance.executeGenerator(it.allSource.files);
    }
}