plugins {
    id 'java'
    id 'fabric-loom' version "$versionLoom"
    id 'maven-publish'
}

def variable = project.hasProperty('variable') ? project.property('variable') : '1.20.1'

def configFile = file("gradle.${variable}.properties")
if (configFile.exists()) {
    def props = new Properties()
    configFile.withInputStream { props.load(it) }
    props.each { key, value ->
        project.setProperty(key, value)
    }
}

overrideJavaVersion = 17

apply from: '../global.gradle'

dependencies {
    compileOnly project(':common')
}

projectSyncVariables(project(':common'))
projectCombineJars(project(':common'))

//<editor-fold desc="Settings: Mod">
var modId = "${group}/${pathName}".toLowerCase().replaceAll("[.:/]", "-");

loom {
    splitEnvironmentSourceSets()
    mods {
        "${modId}" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${versionMinecraft}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${versionLoader}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${versionFabric}"
}

processResources {
    configureProcessResources(delegate, "fabric.mod.json", [
            modId: "${modId}",
            group: "${project.group}",
    ])
}
//</editor-fold>

//<editor-fold desc="Settings: Libraries">
configurations {
    transitiveInclude {
        transitive = true

        exclude group: 'com.mojang'
        exclude group: 'net.fabricmc'
        exclude group: 'org.jetbrains.kotlin'
        exclude group: 'org.jetbrains.kotlinx'
        exclude group: 'com.google.guava'
    }
}
//<editor-fold desc="Settings: Libraries: ByteBuddy">
dependencies {
    modImplementation include("net.bytebuddy:byte-buddy-agent:${versionByteBuddy}")
    modImplementation include("net.bytebuddy:byte-buddy:${versionByteBuddy}")
}
//</editor-fold>
//<editor-fold desc="Settings: Libraries: Commons Lang v3">
dependencies {
    transitiveInclude implementation("org.apache.commons:commons-lang3:${versionCommonsLang3}")
}
//</editor-fold>
//<editor-fold desc="Settings: Libraries: Adventure">
repositories {
    maven {
        name = "sonatype-oss-snapshots1"
        url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
        mavenContent { snapshotsOnly() }
    }
    mavenCentral()
}

dependencies {
    modImplementation include("net.kyori:adventure-platform-fabric:${versionAdventurePlatform}")
    modImplementation include("net.kyori:adventure-text-serializer-ansi:${versionAdventureApi}")
    modImplementation include("net.kyori:adventure-text-serializer-gson:${versionAdventureApi}")
    modImplementation include("net.kyori:adventure-text-serializer-json:${versionAdventureApi}")
    modImplementation include("net.kyori:adventure-text-serializer-legacy:${versionAdventureApi}")
    modImplementation include("net.kyori:adventure-text-serializer-plain:${versionAdventureApi}")
}
//</editor-fold>
//<editor-fold desc="Settings: Libraries: com.google.inject#guice">
dependencies {
    transitiveInclude implementation("com.google.inject:guice:${versionGuice}")
}
//</editor-fold>
afterEvaluate {
    def added = new HashSet<String>()

    configurations.transitiveInclude.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def id = artifact.moduleVersion.id
        def notation = "${id.group}:${id.name}:${id.version}"

        if (!added.contains(notation)) {
            logger.lifecycle("Adding transitive include -> ${notation}")
            dependencies.add("include", notation)
            added.add(notation)
        } else {
            logger.debug("Already added: ${notation}")
        }
    }
}
//</editor-fold>

//<editor-fold desc="Settings: Maven">
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = "${pathName}"
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/${System.getenv("GITHUB_REPOSITORY")}")
            credentials {
                username = System.getenv("GITHUB_OWNER")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}
//</editor-fold>

println("FABRIC: ${group}/${pathName}#${version}")
