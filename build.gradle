plugins {
    id 'maven-publish'
    id "fr.brouillard.oss.gradle.jgitver" version "+"
}

apply from: 'version.gradle'

static java.util.Optional<Iterable<org.gradle.jvm.tasks.Jar>> optionalJarTasks(Project target, String name) {
    def tasks = target.tasks
            .withType(org.gradle.jvm.tasks.Jar)
            .named { jit -> jit == name }
    return tasks.isEmpty()
            ? java.util.Optional.<Iterable<org.gradle.jvm.tasks.Jar>>empty()
            : java.util.Optional.<Iterable<org.gradle.jvm.tasks.Jar>>of(tasks)
}
static Iterable<org.gradle.jvm.tasks.Jar> jarTasks(Project target, String name) {
    for (def prefix : ["remap",""]) {
        def taskName = prefix.isEmpty() ? name : "${prefix}${name.capitalize()}"
        def tasks = optionalJarTasks(target, taskName)
        if (tasks.isPresent())
            return tasks.get();
    }
    return []
}

TaskProvider<Copy> registerResultJarTask(String prefix) {
    def taskName = prefix.isEmpty() ? "jar" : "${prefix}Jar"
    def resultTaskName = "result${taskName.capitalize()}"
    return tasks.register(resultTaskName, Copy) {
        dependsOn subprojects.collect { jarTasks(it, taskName) }
        
        from {
            subprojects.collect {
                jarTasks(it, taskName).collect {
                    it.archiveFile
                }
            }
        }
        into layout.buildDirectory.dir("libs")
    }
}

def resultJarTask = registerResultJarTask("")
def resultSourcesJarTask = registerResultJarTask("sources")

allprojects {
    repositories {
        mavenCentral()
    }
}

apply from: 'global.gradle'
apply from: 'remote.gradle'

tasks.register("build") {
    dependsOn(resultJarTask, resultSourcesJarTask)
}
