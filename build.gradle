plugins {
    id 'java-library'
    id 'maven-publish'
    id "io.papermc.paperweight.userdev" version "+"
    id "fr.brouillard.oss.gradle.jgitver" version "+"
}

//<editor-fold desc="Settings: Plugin">
import io.papermc.paperweight.userdev.ReobfArtifactConfiguration

dependencies {
    paperweight.paperDevBundle("${versionPaper}")
}

version = "$version";
boolean hasPostfixOriginal = false;
if (version.contains('-')) {
    hasPostfixOriginal = true;
    String[] argsVersion = version.split('-', 2);
    if (argsVersion[1] == "0") {
        version = argsVersion[0];
    } else {
        version = "${argsVersion[0]}-alpha.${argsVersion[1]}";
    }
}
var globalProps = getProperties();
boolean isTagCommit = "LIGHTWEIGHT" == globalProps["base_tag_type"];
if (!hasPostfixOriginal && !isTagCommit) {
    var argsVersion = version.split('\\.');
    int lastIndex = argsVersion.length - 1;
    String lastValue = argsVersion[lastIndex];
    try {
        lastValue = Integer.toString(Integer.parseUnsignedInt(lastValue) + 1) + "-alpha.0";
    } catch (ignored) {
        lastValue = lastValue + "-unsafe";
    }
    argsVersion[lastIndex] = lastValue;
    version = String.join(".", argsVersion);
}

task printVersion {
    println "Project version: $version"
}

paperweight.reobfArtifactConfiguration = ReobfArtifactConfiguration.getMOJANG_PRODUCTION()

processResources {
    def props =
    [
        version: "${version}",
        versionGraalVm: "${versionGraalVm}"
    ]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
//</editor-fold>

//<editor-fold desc="Settings: Java">
int targetJavaVersion = 23
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}
//</editor-fold>

//<editor-fold desc="Settings: Maven">
publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components["java"])
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/${System.getenv("GITHUB_REPOSITORY")}")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}
//</editor-fold>

//<editor-fold desc="Settings: SourceGenerator">
apply from: 'sourcegenerator.gradle'
//</editor-fold>

//<editor-fold desc="Settings: Libraries">
//<editor-fold desc="Settings: Libraries: GraalJS">
dependencies {
    implementation "org.graalvm.js:js:${versionGraalVm}"
    implementation "org.graalvm.js:js-scriptengine:${versionGraalVm}"
    implementation "org.graalvm.truffle:truffle-api:${versionGraalVm}"
}
//</editor-fold>

//<editor-fold desc="Settings: Libraries: ProtocolLib">
repositories {
    maven { url "https://repo.dmulloy2.net/repository/public/" }
}

dependencies {
    compileOnly "com.comphenix.protocol:ProtocolLib:${versionProtocolLib}"
}
//</editor-fold>
//</editor-fold>

//<editor-fold desc="Settings: Clean output folder">
task cleanJarOutput(type: Delete) {
    delete jar.destinationDirectory
}

jar.dependsOn(cleanJarOutput)
//</editor-fold>