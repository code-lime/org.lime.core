plugins {
    id 'java-library'
    id 'maven-publish'
    id "fr.brouillard.oss.gradle.jgitver" version "+"
}

apply from: 'version.gradle'

static Map<String, ?> parseAttributes(byte[] bytes) {
    try (def input = new ByteArrayInputStream(bytes)) {
        def jdkManifest = new java.util.jar.Manifest(input)
        return jdkManifest.mainAttributes.entrySet().collectEntries { Map.Entry<java.util.jar.Attributes.Name, Object> e ->
            Map.entry(e.key.toString(), e.value)
        }
    }
}
static java.util.Optional<Iterable<org.gradle.jvm.tasks.Jar>> optionalJarTasks(Project target, String name) {
    def tasks = target.tasks
            .withType(org.gradle.jvm.tasks.Jar)
            .named { jit -> jit == name }
    return tasks.isEmpty()
            ? java.util.Optional.<Iterable<org.gradle.jvm.tasks.Jar>>empty()
            : java.util.Optional.<Iterable<org.gradle.jvm.tasks.Jar>>of(tasks)
}
static Iterable<org.gradle.jvm.tasks.Jar> jarTasks(Project target, String name) {
    for (def prefix : ["remap",""]) {
        def taskName = prefix.isEmpty() ? name : "${prefix}${name.capitalize()}"
        def tasks = optionalJarTasks(target, taskName)
        if (tasks.isPresent())
            return tasks.get();
    }
    return []
}

TaskProvider<Jar> registerResultJarTask(String prefix) {
    def taskName = prefix.isEmpty() ? "jar" : "${prefix}Jar"
    def resultTaskName = "result${taskName.capitalize()}"
    return tasks.register(resultTaskName, Jar) {
        archiveClassifier.set(prefix)
        destinationDirectory.set(layout.buildDirectory.dir("libs"))
        dependsOn subprojects.collect { jarTasks(it, taskName) }

        duplicatesStrategy = DuplicatesStrategy.EXCLUDE

        from {
            subprojects.collect {
                jarTasks(it, taskName).collect {
                    zipTree(it.archiveFile)
                }
            }
        }

        manifest {
            from {
                subprojects.forEach { proj ->
                    jarTasks(proj, taskName).forEach { v ->
                        zipTree(v.archiveFile)
                                .matching { include 'META-INF/MANIFEST.MF' }
                                .forEach { manifest.attributes(parseAttributes(it.readBytes())) }
                    }
                }
                project.resources.text.fromString("")
            }
        }
    }
}

def resultJarTask = registerResultJarTask("")
def resultSourcesJarTask = registerResultJarTask("sources")

allprojects {
    repositories {
        mavenCentral()
    }
}

apply from: 'global.gradle'

//<editor-fold desc="Settings: Maven">
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(resultJarTask.get()) {
                classifier = null
            }
            artifact(resultSourcesJarTask.get()) {
                classifier = "sources"
            }
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/${System.getenv("GITHUB_REPOSITORY")}")
            credentials {
                username = System.getenv("GITHUB_OWNER")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}
//</editor-fold>

build {
    dependsOn(resultJarTask, resultSourcesJarTask)
}