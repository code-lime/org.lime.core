package org.lime.system.toast;

import org.lime.system.execute.*;

// Generated by JavaScript (c) Lime
public class Toast2<T0, T1> extends IToast {
    public LockToast2<T0, T1> lock() { return new LockToast2<>(this); }
    @Override public Object[] getValues() { return new Object[] { val0, val1 }; }
    public Toast2(T0 val0, T1 val1) { this.val0 = val0; this.val1 = val1; }
    public T0 val0; public T1 val1;
    public T0 get0() { return val0; } public T1 get1() { return val1; }
    @Override public int size() { return 2; }
    @Override public int hashCode() { return super.hashCode(); }
    @Override public boolean equals(Object obj) { return super.equals(obj); }
    @Override public Object get(int index) { switch (index) { case 0: return val0; case 1: return val1; } return null; }
    @Override public void set(int index, Object value) { switch (index) { case 0: val0 = (T0)value; break; case 1: val1 = (T1)value; break; } }
    @Override public Object edit(int index, Func1<Object, Object> func) { Object ret; set(index, ret = func.invoke(get(index))); return ret; }
    public <A0, A1>Toast2<A0, A1> map(Func1<T0, A0> map0, Func1<T1, A1> map1) { return Toast.of(map0.invoke(val0), map1.invoke(val1)); }
    public void invoke(Action2<T0, T1> action) { action.invoke(val0, val1); }
    public <T>T invokeGet(Func2<T0, T1, T> func) { return func.invoke(val0, val1); }
}
