package org.lime.system;

import com.google.common.collect.Streams;
import org.apache.commons.lang.StringUtils;
import org.lime.core;
import org.lime.database.SQLite;
import org.lime.plugin.CoreElement;
import org.lime.system.execute.Execute;
import org.lime.system.execute.Func1;
import org.lime.system.toast.Toast;
import org.lime.system.toast.Toast2;
import org.lime.system.toast.Toast4;
import org.sqlite.JDBC;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.regex.MatchResult;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;

public class Regex {
    //private static final ConcurrentHashMap<String, Pattern> patterns = new ConcurrentHashMap<>();
    //private static final ConcurrentHashMap<Toast2<String, String>, Boolean> comparers = new ConcurrentHashMap<>();
    private static final ConcurrentHashMap<Toast2<String, String>, Iterable<MatchResult>> iterables = new ConcurrentHashMap<>();

    private static final String CREATE_TABLE_COMPARERS =
            "CREATE TABLE IF NOT EXISTS `comparers` (" + String.join(",",
                    "`input` text NOT NULL",
                    "`regex` text NOT NULL",
                    "`result_find` int(1) NOT NULL",
                    "`result_matches` int(1) NOT NULL",
                    "UNIQUE (`input`, `regex`)"
            ) + ");";
    private static SQLite sqlite;
    private static final Pattern NONE_PATTERN = Pattern.compile("^#^");
    private static Pattern compileRegex(String regex) {
        try {
            return Pattern.compile(regex, Pattern.CASE_INSENSITIVE);
        } catch (PatternSyntaxException e) {
            return NONE_PATTERN;
        }
    }

    /*private static int FORCE_LOAD_TOTAL = 0;
    private static int FORCE_LOAD_TOTAL_STEPS = 0;
    private static ConcurrentLinkedQueue<Toast4<String, String, Boolean, Boolean>> FORCE_LOAD = null;
    private static void executeForce(List<Toast4<String, String, Boolean, Boolean>> list) {
        int count = list.size();
        if (count == 0) return;
        FORCE_LOAD_TOTAL += count;
        sqlite.execute("INSERT OR IGNORE INTO comparers VALUES " + "(?,?,?,?), ".repeat(count - 1) + "(?,?,?,?)", e -> {
            int index = 1;
            for (Toast4<String, String, Boolean, Boolean> item : list) {
                e.setString(index++, item.val0);
                e.setString(index++, item.val1);
                e.setBoolean(index++, item.val2);
                e.setBoolean(index++, item.val3);
            }
            e.executeUpdate();
        });
        if (FORCE_LOAD_TOTAL_STEPS % 100 == 0) {
            System.out.println("Force load progress: " + FORCE_LOAD_TOTAL);
        }
        FORCE_LOAD_TOTAL_STEPS++;
    }*/

    private static int CALLS_TOTAL = 0;
    private static int CALLS_TOTAL_QUEUE = 0;
    private static int CALLS_TOTAL_STEPS = 0;
    private static boolean executeRegex(SQLite sqlite, String input, String regex, boolean part) {
        if (sqlite == null) {
            Matcher matcher = compileRegex(regex).matcher(input);
            return part ? matcher.find() : matcher.matches();
        }
        CALLS_TOTAL++;
        if (CALLS_TOTAL > 1000) {
            CALLS_TOTAL_QUEUE += CALLS_TOTAL;
            CALLS_TOTAL = 0;
            CALLS_TOTAL_STEPS++;
            if (CALLS_TOTAL_STEPS % 100 == 0) {
                System.out.println("["+ StringUtils.leftPad(String.valueOf((CALLS_TOTAL_QUEUE * 100) / 25548718), 3, '0')+"%] Calls load progress " + CALLS_TOTAL_QUEUE + " / " + 25548718 + "...");
            }
        }
        /*ConcurrentLinkedQueue<Toast4<String, String, Boolean, Boolean>> forceLoad = FORCE_LOAD;
        if (forceLoad != null) {
            Matcher matcher = compileRegex(regex).matcher(input);
            boolean find = matcher.find();
            boolean matches = matcher.matches();
            forceLoad.add(Toast.of(input, regex, find, matches));
            if (forceLoad.size() > 1000) {
                List<Toast4<String, String, Boolean, Boolean>> list = new ArrayList<>();
                forceLoad.removeIf(item -> {
                    list.add(item);
                    return true;
                });
                executeForce(list);
            }
            return part ? matcher.find() : matcher.matches();
        }*/
        Boolean state = sqlite.executeGet("SELECT `result"+(part ? "_find" : "_matches")+"` FROM comparers WHERE comparers.`input` = ? AND comparers.`regex` = ?", e -> {
            e.setString(1, input);
            e.setString(2, regex);
            try (ResultSet set = e.executeQuery()) {
                if (set.next()) return set.getBoolean(1);
                return null;
            }
        });
        if (state != null) return state;
        Matcher matcher = compileRegex(regex).matcher(input);
        boolean find = matcher.find();
        boolean matches = matcher.matches();
        sqlite.execute("INSERT OR IGNORE INTO comparers VALUES (?,?,?,?)", e -> {
            e.setString(1, input);
            e.setString(2, regex);
            e.setBoolean(3, find);
            e.setBoolean(4, matches);
            e.executeUpdate();
        });
        return part ? find : matches;
    }
    public static CoreElement create() {
        /*if (!core.instance._existConfig("regex.db")) {
            FORCE_LOAD = new ConcurrentLinkedQueue<>();
        }*/
        sqlite = new SQLite(core.instance._getConfigFile("regex.db"));
        sqlite.execute(CREATE_TABLE_COMPARERS, PreparedStatement::executeUpdate);
        /*core.instance._onceTicks(() -> {
            ConcurrentLinkedQueue<Toast4<String, String, Boolean, Boolean>> forceLoad = FORCE_LOAD;
            FORCE_LOAD = null;
            List<Toast4<String, String, Boolean, Boolean>> list = new ArrayList<>();
            forceLoad.removeIf(item -> {
                list.add(item);
                return true;
            });
            executeForce(list);
            System.out.println("Force load total: " + FORCE_LOAD_TOTAL);
        }, 2);*/
        return CoreElement.create(Regex.class)
                .withUninit(Regex::uninit);
    }
    private static void uninit() {
        sqlite.close();
    }

    public static boolean compareRegex(String input, String regex) { return compareRegex(input, regex, false); }
    public static boolean compareRegex(String input, String regex, boolean part) { return executeRegex(sqlite, input, regex, part); }
    public static <T> Stream<T> filterRegex(Iterable<T> input, Func1<T, String> format, String regex) {
        return filterRegex(input, format, regex, false);
    }
    public static <T>Stream<T> filterRegex(Iterable<T> input, Func1<T, String> format, String regex, boolean part) {
        return Streams.stream(input).filter(filterRegex(format, regex, part)::invoke);
    }
    public static <T> Func1<T, Boolean> filterRegex(Func1<T, String> format, String regex) {
        return filterRegex(format, regex, false);
    }
    public static <T> Func1<T, Boolean> filterRegex(Func1<T, String> format, String regex, boolean part) {
        return Execute.func(v -> compareRegex(format.invoke(v), regex, part));
    }
    public static Iterable<MatchResult> iterableRegex(String input, String regex) {
        return iterables.compute(Toast.of(input, regex), (k, v) -> {
            if (v != null) return v;
            return iterableRegex(compileRegex(regex), input);
        });
    }
    public static Iterable<MatchResult> iterableRegex(final Pattern p, final String input) {
        return () -> new Iterator<MatchResult>() {
            // Use a matcher internally.
            final Matcher matcher = p.matcher(input);
            // Keep a match around that supports any interleaving of hasNext/next calls.
            MatchResult pending;

            public boolean hasNext() {
                // Lazily fill pending, and avoid calling find() multiple times if the
                // clients call hasNext() repeatedly before sampling via next().
                if (pending == null && matcher.find()) pending = matcher.toMatchResult();
                return pending != null;
            }

            public MatchResult next() {
                // Fill pending if necessary (as when clients call next() without
                // checking hasNext()), throw if not possible.
                if (!hasNext()) throw new NoSuchElementException();
                // Consume pending so next call to hasNext() does a find().
                MatchResult next = pending;
                pending = null;
                return next;
            }

            /**
             * Required to satisfy the interface, but unsupported.
             */
            public void remove() {
                throw new UnsupportedOperationException();
            }
        };
    }
}
