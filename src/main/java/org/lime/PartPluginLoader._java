package org.lime;

import org.bukkit.Bukkit;
import org.bukkit.plugin.Plugin;
import org.bukkit.plugin.PluginDescriptionFile;
import org.bukkit.plugin.java.JavaPlugin;

import java.io.File;
import java.util.*;

public class PartPluginLoader {
    public static class Loader {
        private final LibraryClassLoader loader;
        private final String tClass;
        private Class<?> lClass;
        public Loader(JavaPlugin plugin, File file, String tClass) {
            this.tClass = tClass;
            this.loader = new LibraryClassLoader(plugin, file);
        }
        public void load()
        {
            try{
                lClass = this.loader.loadOnce(tClass);
            } catch (Exception e) {
                core.instance._logStackTrace(e);
                throw e;
            }
        }
        public void unload() { this.loader.unload(false); lClass = null; }
        public void reload() { unload(); load(); }
    }
    public static class PluginLoader {
        private final HashMap<String, Loader> classes;
        private final Class<?> mainClass;
        private final PluginDescriptionFile description;
        public PluginLoader(JavaPlugin plugin, File file) {
            try {
                description = plugin.getPluginLoader().getPluginDescription(file);
                classes = load(plugin, file);
                classes.values().forEach(Loader::load);
                mainClass = classes.get(description.getMain()).lClass;
            }
            catch (Exception ex) {
                throw new IllegalArgumentException(ex);
            }
        }
        public void reload() { classes.values().forEach(Loader::reload); }
        public List<String> getClasses() { return new ArrayList<>(this.classes.keySet()); }
        public boolean reloadClass(String tClass) {
            Loader loader = this.classes.getOrDefault(tClass, null);
            if (loader == null) return false;
            loader.reload();
            return true;
        }

        private static HashMap<String, Loader> load(JavaPlugin plugin, File file) {
            List<String> classes = LibraryClassLoader.getClasses(file);
            LinkedHashMap<String, Loader> loaders = new LinkedHashMap<>();
            classes.forEach(tClass -> loaders.put(tClass, new Loader(plugin, file, tClass)));
            return loaders;
        }
    }

    public static PluginLoader load(JavaPlugin plugin, File file) {
        PluginLoader loader = new PluginLoader(plugin, file);
        Plugin instance;
        try { instance = (Plugin)loader.mainClass.newInstance(); } catch (Exception e) { throw new IllegalArgumentException(e); }
        Bukkit.getPluginManager().enablePlugin(instance);
        return loader;
    }
}

















